// Input file for the calibration of snowflakes shape parameters using
// Bayesian approach.

// Project name
name = "";


// -------------------------------------------------------------------------
// DATA SET
// -------------------------------------------------------------------------
dataSet =
{
  // Type of dataset. Possible options:
  // "generate" ~ generate a dataset from an implemented reference paper or
  //              from specific shape parameters. Requires to specify the
  //              "testCase" variable.
  // "load"     ~ load a data set from file. FIle format:
  //              1 line: data name
  //              1 line: data longname (brief desctipion - 1 line ONLY!)
  //              1 line: number of data (dv vt sigma \n)
  type = "";

  // Test data set generation ------------------------------------------------

  // Name of the test case. Implemented tests:
  // "MONOMODAL" ~ Uncorrelated normal distribution of [n] shape parameters.
  // For these test cases select also the "model" to be used and make sure that
  // the number of shape parameter [n] given is consistent with it.

  // "BRANDES1" ~ Reconstruction from the paper " TITOLO "
  // No model and parameters needed.
  name = "";

  // Model used for dataset generation (optional)
  // "Test"               ~ 1, 2 or 3 shape parameters (To Be Implemented)
  // "Ganser"             ~ 2 shape parameters
  // "Holtzer&Sommerfeld" ~ 2 shape parameters
  model = "";

  // Number of shape parameters (optional)
  nParam = ;

  // Mean value of the shape parameters. List of "nParam" arrays containing the
  // mean of each mode. (optional)
  mu = ( [mu1],
         [mu2]
       );

  // Standard devation of the shape parameters. List of "nParam" arrays
  // containing the standard deviation of each mode. (optional)
  sigma = ( [sigma1],
            [sigma2]
          );

  // Mixing length of the shape parameters. List of "nParam" arrays containing
  // the mixing length of each mode. (optional)
  pi = ( [pi1],
         [pi2]
       );

  // Array of characteristic diameter to be used in the data generation. Can
  // also be given in the form [first, step, last] with the flag "generate = 1".
  D = { generate = true;
        vec = [first, step, last];
      };

  // Number of samples generated for each diameter value
  nData = ;

  // Data set loading ----------------------------------------------------------
  // File containing the dataset. Complete with the relative path to the file
  // and the correct extension.
  file = ;

  // Print the loaded data to screen for checkig. (Default is false)
  printData = false;
}

// -------------------------------------------------------------------------
// DATA ANALYSIS
// -------------------------------------------------------------------------
dataAnalysis =
{
  // Approach of the analysis. Options
  // "bruteforce" ~ Brute Force approach. The "posterior" file will contain all
  //                the posterior elements
  // "GA"         ~ Genetic Algorithm approach. (Work in progress)
  approach = "";

  // Input file (Genetic Algoritm only). Complete with the relative path to the
  // file and the correct extension. (Default is "none")
  inputFile = "";

  // File where to save the GA results (Genetic Algoritm only). Complete with
  // the relative path to the file and the correct extension. (Default is "none")
  outputFile = "";

  // Drag model used for the calibration. Options
  // "Test"               ~ 1, 2 or 3 shape parameters (To Be Implemented)
  // "Ganser"             ~ 2 shape parameters
  // "Holtzer&Sommerfeld" ~ 2 shape parameters
  model = "";

  // Shape parameter definition. List with Stucture:
  // name   ~ name of the parameter
  // latex  ~ name of the parameter (latex format - optional)
  // K      ~ number of modes
  // vec    ~ vector of all the possible parameter values. Can also be given
  //          in the form [first, step, last] with the flag "generate = 1"
  phi = ( { name = "";
            latex = "";
            K = ;
            vec = { generate = true;
                   vec = [first, step, last]; }; },
          { name = "";
            latex = "";
            K = ;
            vec = { generate = true;
                   vec = [first, step, last]; }; }
        );

  // Coefficients for the Mixing Length calculation. Can also be given in the
  // form [first, step, last] with the flag "generate = 1"
  pi = { generate = true;
         vec = [first, step, last]; };

};

// -------------------------------------------------------------------------
// AMBIENT PARAMETERS
// -------------------------------------------------------------------------
ambient =
{
  rho_a = 1.225;      // air density               [ kg/m^3 ]
  mu = 1.715e-5;      // air viscosity             [ kg/ms ]
  g = 9.81;           // gravity field             [ N/kg ]
};



// -------------------------------------------------------------------------
// INPUT / OUTPUT
// -------------------------------------------------------------------------
// File where to save the output (default is screen) (To Be Implemented)
outfile = ;

// File where to save the posterior (for "bruteforce" approach only)
posterior = ;
